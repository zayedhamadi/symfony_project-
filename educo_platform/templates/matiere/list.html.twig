

{% extends 'side-bar.html.twig' %}

{% block title %} Liste des Matières {% endblock %}

{% block body %}
<div style="margin-top: 100px; margin-left: 0;">
    <a href="{{ path('app_matiere_new') }}" class="btn btn-success mb-3">Ajouter une Matière</a>


    <div class="container mt-4">
        <h1 class="mb-4">Liste des Matières</h1>
        <!-- Search Form -->
        <form id="search-form" method="GET" action="{{ path('app_matiere_list') }}" class="mb-3">
            <div class="input-group">
                <input type="text" id="search-input" name="search" class="form-control" placeholder="Rechercher un enseignant..." value="{{ app.request.get('search') }}">
                <button type="submit" class="btn btn-primary">Rechercher</button>
            </div>
        </form>

        <!-- Matieres List Table -->
        <div id="matiere-list">
            {% include 'matiere/ajax_list.html.twig' %}
        </div>

{#        {% for teacher, matieres in groupedMatieres %}#}
{#            <h3>{{ teacher }}</h3> <!-- Display Teacher's Name -->#}

{#            <table class="table table-striped">#}
{#                <thead>#}
{#                <tr>#}
{#                    <th>ID</th>#}
{#                    <th>Nom de la Matière</th>#}
{#                    <th>Actions</th>#}
{#                </tr>#}
{#                </thead>#}
{#                <tbody>#}
{#                {% for matiere in matieres %}#}
{#                    <tr>#}
{#                        <td>{{ matiere.id }}</td>#}
{#                        <td>{{ matiere.nom }}</td>#}

{#                        <td>#}
{#                            <a href="{{ path('app_matiere_edit', {'id': matiere.id}) }}" class="btn btn-warning btn-sm">Modifier</a>#}
{#                        </td>#}
{#                        <td>#}
{#                            <form action="{{ path('app_matiere_delete', {'id': matiere.id}) }}" method="post" class="d-inline"#}
{#                                  onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cette matière ?');">#}
{#                                <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ matiere.id) }}">#}
{#                                <button type="submit" class="btn btn-danger btn-sm">Supprimer</button>#}
{#                            </form>#}
{#                        </td>#}



{#                    </tr>#}
{#                {% endfor %}#}
{#                </tbody>#}
{#            </table>#}
{#        {% else %}#}
{#            <p>Aucune matière trouvée.</p>#}
{#        {% endfor %}#}

    </div>

</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function initializeSearch() {
            const searchInput = document.getElementById("search-input");
            const matiereList = document.getElementById("matiere-list");
            let timer;

            if (searchInput && matiereList) {
                searchInput.addEventListener("keyup", function () {
                    clearTimeout(timer); // Clear any existing timer
                    const query = searchInput.value.trim(); // Remove leading/trailing spaces

                    timer = setTimeout(() => {
                        // Update the browser's URL with the search query
                        const url = new URL(window.location.href);
                        url.searchParams.set("search", query);
                        window.history.replaceState({}, "", url);

                        fetch("{{ path('app_matiere_list') }}?search=" + encodeURIComponent(query) + "&_=" + Date.now(), {
                            headers: { "X-Requested-With": "XMLHttpRequest" } // Identify as AJAX request
                        })
                            .then(response => response.text())
                            .then(data => {
                                matiereList.innerHTML = data; // Update matiere list
                            })
                            .catch(error => console.error("Erreur lors du filtrage :", error));
                    }, 300); // Wait 300ms before sending the request
                });
            }
        }

        // Initialize search on page load
        document.addEventListener("DOMContentLoaded", initializeSearch);

        // Re-initialize search if the page is loaded dynamically (e.g., via TurboLinks or similar)
        if (typeof Turbo !== "undefined") {
            document.addEventListener("turbo:load", initializeSearch);
        }
    </script>
{% endblock %}
